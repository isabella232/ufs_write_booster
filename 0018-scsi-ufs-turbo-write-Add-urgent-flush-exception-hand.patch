From 5ccdb46bad3aff7b8e6cfe9deb5de3c5a865afb2 Mon Sep 17 00:00:00 2001
From: Avri Altman <avri.altman@wdc.com>
Date: Tue, 2 Apr 2019 16:34:10 +0300
Subject: [PATCH 18/25] scsi: ufs: turbo-write: Add urgent flush exception
 handler

When the entire buffer for Turbo Write is consumed, even though the
Turbo Write command is issued, the data should be stored in normal
storage instead of in the Turbo Write Buffer. Therefore, the device
informs the host when the Turbo Write Buffer is full or near full.
Such a situation is reported to the host via the
TURBO_WRITE_FLUSH_NEEDED exception mechanism.

One may expect that the host will issue an explicit flush command in
reponse to this event.  At this point however, we won't.
just refcount those events and make them available by sysfs.

Change-Id: Id0bad1d49c7bf3678bacc99c7120dffde513b060
Signed-off-by: Avri Altman <avri.altman@wdc.com>
---
 drivers/scsi/ufs/ufs-sysfs.c | 14 ++++++++++++++
 drivers/scsi/ufs/ufs.h       |  1 +
 drivers/scsi/ufs/ufshcd.c    | 23 +++++++++++++++++++++++
 drivers/scsi/ufs/ufshcd.h    |  1 +
 4 files changed, 39 insertions(+)

diff --git a/drivers/scsi/ufs/ufs-sysfs.c b/drivers/scsi/ufs/ufs-sysfs.c
index 046c124..dd17df0 100644
--- a/drivers/scsi/ufs/ufs-sysfs.c
+++ b/drivers/scsi/ufs/ufs-sysfs.c
@@ -219,6 +219,18 @@ turbo_write_do_hibern8_flush_store(struct device *dev,
 	return count;
 }
 
+static ssize_t turbo_write_urgent_flush_ref_show(struct device *dev,
+						 struct device_attribute *attr,
+						 char *buf)
+{
+	struct ufs_hba *hba = dev_get_drvdata(dev);
+
+	if (!ufshcd_is_tw_supported(hba))
+		return -EOPNOTSUPP;
+
+	return sprintf(buf, "%d\n", atomic_read(&hba->tw_urgent_flush_ref));
+}
+
 static DEVICE_ATTR_RW(rpm_lvl);
 static DEVICE_ATTR_RO(rpm_target_dev_state);
 static DEVICE_ATTR_RO(rpm_target_link_state);
@@ -228,6 +240,7 @@ static DEVICE_ATTR_RO(spm_target_link_state);
 static DEVICE_ATTR_RW(turbo_write_do_enable);
 static DEVICE_ATTR_RW(turbo_write_do_flush);
 static DEVICE_ATTR_RW(turbo_write_do_hibern8_flush);
+static DEVICE_ATTR_RO(turbo_write_urgent_flush_ref);
 
 static struct attribute *ufs_sysfs_ufshcd_attrs[] = {
 	&dev_attr_rpm_lvl.attr,
@@ -239,6 +252,7 @@ static struct attribute *ufs_sysfs_ufshcd_attrs[] = {
 	&dev_attr_turbo_write_do_enable.attr,
 	&dev_attr_turbo_write_do_flush.attr,
 	&dev_attr_turbo_write_do_hibern8_flush.attr,
+	&dev_attr_turbo_write_urgent_flush_ref.attr,
 	NULL
 };
 
diff --git a/drivers/scsi/ufs/ufs.h b/drivers/scsi/ufs/ufs.h
index 75be5bc..b19759b 100644
--- a/drivers/scsi/ufs/ufs.h
+++ b/drivers/scsi/ufs/ufs.h
@@ -326,6 +326,7 @@ enum {
 	MASK_EE_URGENT_BKOPS		= (1 << 2),
 	MASK_EE_TOO_HIGH_TEMP		= (1 << 3),
 	MASK_EE_TOO_LOW_TEMP		= (1 << 4),
+	MASK_EE_TW_FLUSH_NEEDED		= (1 << 5),
 };
 
 /* Background operation status */
diff --git a/drivers/scsi/ufs/ufshcd.c b/drivers/scsi/ufs/ufshcd.c
index 3adff42..e5fcc1a 100644
--- a/drivers/scsi/ufs/ufshcd.c
+++ b/drivers/scsi/ufs/ufshcd.c
@@ -5053,6 +5053,7 @@ static int ufshcd_get_tw_mode(struct ufs_hba *hba, u8 *desc_buf)
 
 	hba->tw_size = val;
 	err = ufshcd_turbo_write_enable_flush_on_hibern8(hba);
+	atomic_set(&hba->tw_urgent_flush_ref, 0);
 
 out:
 	if (err)
@@ -6342,6 +6343,25 @@ static int ufshcd_verify_dev_init(struct ufs_hba *hba)
 	return err;
 }
 
+static void ufshcd_turbo_write_exception_event_handler(struct ufs_hba *hba)
+{
+
+	if (!ufshcd_is_tw_supported(hba))
+		return;
+	/*
+	 * When the entire buffer for Turbo Write is consumed, even though the
+	 * Turbo Write command is issued, the data should be stored in normal
+	 * storage instead of in the Turbo Write Buffer. Therefore, the device
+	 * informs the host when the Turbo Write Buffer is full or near full.
+	 * Such a situation is reported to the host via the
+	 * TURBO_WRITE_FLUSH_NEEDED exception mechanism.
+	 * One may expect that the host will issue an explicit flush command in
+	 * reponse to this event.  At this point however, we won't.
+	 * just refcount those events and make them available by sysfs.
+	 */
+	dev_err(hba->dev, "urgent flush %d\n",
+		atomic_inc_return(&hba->tw_urgent_flush_ref));
+}
 /**
  * ufshcd_enable_turbo_write - enable turbo write
  *
@@ -7408,6 +7428,9 @@ static void ufshcd_exception_event_handler(struct work_struct *work)
 	if (status & MASK_EE_URGENT_BKOPS)
 		ufshcd_bkops_exception_event_handler(hba);
 
+	if (status & MASK_EE_TW_FLUSH_NEEDED)
+		ufshcd_turbo_write_exception_event_handler(hba);
+
 out:
 	ufshcd_scsi_unblock_requests(hba);
 	/*
diff --git a/drivers/scsi/ufs/ufshcd.h b/drivers/scsi/ufs/ufshcd.h
index 62e1e53..d3ed93e 100644
--- a/drivers/scsi/ufs/ufshcd.h
+++ b/drivers/scsi/ufs/ufshcd.h
@@ -1076,6 +1076,7 @@ struct ufs_hba {
 	int tw_size;
 	int tw_flush;
 	bool tw_enabled;
+	atomic_t tw_urgent_flush_ref;
 };
 
 static inline void ufshcd_mark_shutdown_ongoing(struct ufs_hba *hba)
-- 
2.7.4

